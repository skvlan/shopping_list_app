# coding: utf-8

"""
    Grocery List Management API

    A simple REST API for managing a grocery shopping list, designed for student term projects.

    The version of the OpenAPI document: 1.0.0
    Contact: support@example.edu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GroceryItem(BaseModel):
    """
    GroceryItem
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="Name of the grocery item")
    quantity: Annotated[int, Field(strict=True, ge=1)] = Field(description="Quantity of the item needed")
    unit: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="Unit of measurement")
    category: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Category of the item")
    notes: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Additional notes about the item")
    id: StrictInt = Field(description="Unique identifier for the item")
    created_at: datetime = Field(description="When the item was created", alias="createdAt")
    updated_at: datetime = Field(description="When the item was last updated", alias="updatedAt")
    purchased: Optional[StrictBool] = Field(default=False, description="Whether the item has been purchased")
    __properties: ClassVar[List[str]] = ["name", "quantity", "unit", "category", "notes", "id", "createdAt", "updatedAt", "purchased"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GroceryItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GroceryItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "quantity": obj.get("quantity"),
            "unit": obj.get("unit"),
            "category": obj.get("category"),
            "notes": obj.get("notes"),
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "purchased": obj.get("purchased") if obj.get("purchased") is not None else False
        })
        return _obj


